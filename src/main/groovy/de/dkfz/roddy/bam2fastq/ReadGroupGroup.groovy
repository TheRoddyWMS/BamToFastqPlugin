package de.dkfz.roddy.bam2fastq

import de.dkfz.roddy.knowledge.files.FileGroup
import groovy.transform.CompileStatic

@CompileStatic
class ReadGroupGroup {

    List<ReadGroup> readGroups = []

    ReadGroupGroup(final List<ReadGroup> readGroups) {
        this.readGroups = readGroups
    }

    /** FileGroups are generated by taking the output of allReadGroupIds().
     *  With this constructor the responsibility for having the same order in allReadGroupIds() and
     *  constructing a new ReadGroupGroup from a FileGroup (assumption: of the same order) is kept together. */
    ReadGroupGroup(final ReadGroupGroup oldGroups, final FileGroup fileGroup) {
        assert(oldGroups.readGroups.collect { it.files.size() }.sum() == fileGroup.size())
        readGroups = []
        for (int grpIdx = 0; grpIdx < oldGroups.size(); ++grpIdx) {
            ReadGroup newGroup = new ReadGroup(oldGroups.readGroups[grpIdx].name)
            for (int tpeIxd = 0; tpeIxd < ReadFileType.values().size(); ++ tpeIxd) {
                int idx = grpIdx * ReadFileType.values().size() + tpeIxd
                newGroup = newGroup.updatedFile(ReadFileType.values()[tpeIxd], fileGroup[idx])
            }
            readGroups += newGroup
        }
    }

    List<String> allReadGroupIds() {
        readGroups*.readGroupIds().flatten() as List<String>
    }

    Integer size() {
        readGroups.size()
    }

    ReadGroup getAt(int i) {
        readGroups[i]
    }

    ReadGroup getAt(String name) {
        readGroups.find { it.name == name }
    }

}